as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full")
View(conditions_temp_4)
View(conditions_temp_4)
View(conditions_temp_5)
View(conditions_temp_5)
View(combined_data)
View(combined_data)
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste(block_order_1, block_order_2, sep = ""))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = block_order_1 + block_order_2)
?paste
?paste0
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2, sep = ""))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2))
View(combined_data)
View(combined_data)
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(na.omit(block_order_1), na.omit(block_order_2)))
library(stringr)
?concat
?stringr
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = stri_c(na.omit(block_order_1), na.omit(block_order_2), collapse = "")
, block_order_2))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = stri_c(na.omit(block_order_1), na.omit(block_order_2), collapse = ""))
library(stringr)
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = stri_c(na.omit(block_order_1), na.omit(block_order_2), collapse = ""))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = stringr::stri_c(na.omit(block_order_1), na.omit(block_order_2), collapse = ""))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = stringr::str_c(na.omit(block_order_1), na.omit(block_order_2), collapse = ""))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = stringr::str_c(c(na.omit(block_order_1), na.omit(block_order_2)), collapse = ""))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2))
View(combined_data)
View(combined_data)
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
blockorder = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA)))
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
blockorder = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA))) %>%
select(-block_order_1, -block_order_2)
combined_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
blockorder = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA))) %>%
select(-block_order_1, -block_order_2)
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
blockorder = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA))) %>%
select(-block_order_1, -block_order_2)
conditions_temp_4 <- conditions_temp %>%
dplyr::select(n_participant, block_order_1) %>%
dplyr::filter(!is.na(block_order_1)) %>%
dplyr::mutate(block_order_1 = "con")
conditions_temp_5 <- conditions_temp %>%
dplyr::select(n_participant, block_order_2) %>%
dplyr::filter(!is.na(block_order_2)) %>%
dplyr::mutate(block_order_2 = "incon")
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA))) %>%
select(-block_order_1, -block_order_2)
View(conditions_data)
View(conditions_data)
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA))) %>%
select(-block_order_1, -block_order_2, -n_participant)
full_inst_condition_raw <- read.csv("data/experiment 2/full instructions condition/combined raw.csv")
minimal_inst_condition_raw <- read.csv("data/experiment 2/minimal instructions condition/combined raw.csv")
full_inst_condition_raw <- read.csv("data/experiment 2/full instructions condition/combined raw.csv")
minimal_inst_condition_raw <- read.csv("data/experiment 2/minimal instructions condition/combined raw.csv")
combined_raw <- rbind(full_inst_condition_raw, minimal_inst_condition_raw)
View(combined_raw)
View(combined_raw)
processing_temp <- combined_raw %>%
tibble::rownames_to_column() %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/24))
View(processing_temp)
View(processing_temp)
processing_temp <- combined_raw %>%
tibble::rownames_to_column() %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/24 - .25)+1)
processing_temp <- combined_raw %>%
tibble::rownames_to_column() %>%
dplyr::mutate(n_participant = as.numeric(rowname)/24)
processing_temp <- combined_raw %>%
tibble::rownames_to_column() %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/24 - .01)+1)
processing_temp <- combined_raw %>%
tibble::rownames_to_column() %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/24 - .01)+1) %>%
group_by(n_participant) %>%
dplyr::mutate(data_type = floor(as.numeric(rowname)/12 - .01)+1)
conditions_data %>% write.csv("experiment 2/conditions data.csv")
conditions_data %>% write.csv("/experiment 2/conditions data.csv", row.names = FALSE)
conditions_data %>% write.csv("data/experiment 2/conditions data.csv", row.names = FALSE)
setwd("/Users/Ian/git/finn-reanalysis/experiment 2")
conditions_data %>% write.csv("conditions data.csv", row.names = FALSE)
conditions_data %>% write.csv("data/processed/conditions data.csv", row.names = FALSE)
# title: extract data
# author: Ian Hussey (ian.hussey@ugent.be)
# dependencies ------------------------------------------------------------
library(plyr)
library(tidyverse)
# data acquisition and cleaning - experiment 0 (discarded data)  ---------------
setwd("/Users/Ian/git/finn-reanalysis/experiment 2")
# exp 2
# conditions data ---------------------------------------------------------
full_inst_condition_summary <- read.csv("data/raw/full instructions condition/combined summary.csv")
minimal_inst_condition_summary <- read.csv("data/raw/minimal instructions condition/combined summary.csv")
combined_summary <- rbind(full_inst_condition_summary, minimal_inst_condition_summary)
conditions_temp <- combined_summary %>%
dplyr::filter(column_1 == "Participant Name or Code: " |
column_1 == "The consistent responding rule was: " |
column_1 == "The Consistent-First Sequence was Selected" |
column_1 == "The Inconsistent-First Sequence was Selected") %>%
tibble::rownames_to_column() %>%
dplyr::select(rowname, column_1, column_2) %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/4 - .25)+1) %>%  # hacky way to get a grouping var
tidyr::spread(column_1, column_2) %>%
dplyr::rename(participant = `Participant Name or Code: `,
rule = `The consistent responding rule was: `,
block_order_1 = `The Consistent-First Sequence was Selected`,
block_order_2 = `The Inconsistent-First Sequence was Selected`) %>%
dplyr::select(-rowname) %>%
dplyr::arrange(n_participant)
conditions_temp_2 <- conditions_temp %>%
group_by(n_participant) %>%
dplyr::summarize(participant = sum(as.numeric(participant), na.rm = TRUE)/2)
conditions_temp_3 <- conditions_temp %>%
dplyr::select(n_participant, rule) %>%
dplyr::filter(!is.na(rule)) %>%
dplyr::mutate(rule = ifelse(rule == "Colours are colours and shapes are shapes", "full",
ifelse(rule == "Respond correctly to the stimuli", "minimal", NA)))
conditions_temp_4 <- conditions_temp %>%
dplyr::select(n_participant, block_order_1) %>%
dplyr::filter(!is.na(block_order_1)) %>%
dplyr::mutate(block_order_1 = "con")
conditions_temp_5 <- conditions_temp %>%
dplyr::select(n_participant, block_order_2) %>%
dplyr::filter(!is.na(block_order_2)) %>%
dplyr::mutate(block_order_2 = "incon")
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA))) %>%
select(-block_order_1, -block_order_2, -n_participant)
conditions_data %>% write.csv("data/processed/conditions data.csv", row.names = FALSE)
d_scores_data <- read.csv("data/processed/D scored data.csv")
View(d_scores_data)
View(d_scores_data)
d_scores_data <- read.csv("data/processed/D scored data.csv")
d_scores_data <- read.csv("data/processed/D scored data.csv")
View(conditions_temp_5)
View(d_scores_data)
View(d_scores_data)
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order)
View(conditions_data)
View(conditions_data)
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order) %>%
rename(participant = participant_code)
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order) %>%
dplyr::rename(participant = participant_code)
all_data <- full_join(conditions_data, d_scores_data, by = "")
all_data <- full_join(conditions_data, d_scores_data, by = "participant")
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order) %>%
dplyr::rename(participant = participant_code) %>%
dplyr::mutate(participant = as.factor(participant))
all_data <- full_join(conditions_data, d_scores_data, by = "participant")
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA)),
participant = as.factor(participant)) %>%
select(-block_order_1, -block_order_2, -n_participant)
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order) %>%
dplyr::rename(participant = participant_code) %>%
dplyr::mutate(participant = as.factor(participant))
all_data <- full_join(conditions_data, d_scores_data, by = "participant")
all_data <- dplyr::full_join(conditions_data, d_scores_data, by = "participant")
?join
all_data <- dplyr::inner_join(conditions_data, d_scores_data, by = "participant")
View(all_data)
View(all_data)
View(conditions_data)
View(conditions_data)
View(d_scores_data)
View(d_scores_data)
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order) %>%
dplyr::rename(participant = participant_code) %>%
dplyr::mutate(participant = as.factor(participant))
all_data <- dplyr::inner_join(conditions_data, d_scores_data, by = "participant")
View(all_data)
View(all_data)
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA)),
participant = as.factor(participant)) %>%
select(-block_order_1, -block_order_2, -n_participant)
View(conditions_data)
View(conditions_data)
View(conditions_temp)
View(conditions_temp)
conditions_temp <- combined_summary %>%
dplyr::filter(column_1 == "Participant Name or Code: " |
column_1 == "The consistent responding rule was: " |
column_1 == "The Consistent-First Sequence was Selected" |
column_1 == "The Inconsistent-First Sequence was Selected") %>%
tibble::rownames_to_column() %>%
dplyr::select(rowname, column_1, column_2) %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/4 - .25)+1) %>%  # hacky way to get a grouping var
tidyr::spread(column_1, column_2) %>%
dplyr::rename(participant = as.numeric(`Participant Name or Code: `),
rule = `The consistent responding rule was: `,
block_order_1 = `The Consistent-First Sequence was Selected`,
block_order_2 = `The Inconsistent-First Sequence was Selected`) %>%
dplyr::select(-rowname) %>%
dplyr::arrange(n_participant)
conditions_temp <- combined_summary %>%
dplyr::filter(column_1 == "Participant Name or Code: " |
column_1 == "The consistent responding rule was: " |
column_1 == "The Consistent-First Sequence was Selected" |
column_1 == "The Inconsistent-First Sequence was Selected") %>%
tibble::rownames_to_column() %>%
dplyr::select(rowname, column_1, column_2) %>%
dplyr::mutate(n_participant = floor(as.numeric(rowname)/4 - .25)+1) %>%  # hacky way to get a grouping var
tidyr::spread(column_1, column_2) %>%
dplyr::rename(participant = `Participant Name or Code: `,
rule = `The consistent responding rule was: `,
block_order_1 = `The Consistent-First Sequence was Selected`,
block_order_2 = `The Inconsistent-First Sequence was Selected`) %>%
dplyr::select(-rowname) %>%
dplyr::arrange(n_participant)
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA)),
participant = as.factor(participant))
conditions_temp_2 <- conditions_temp %>%
group_by(n_participant) %>%
dplyr::distinct(participant)
View(conditions_temp_2)
View(conditions_temp_2)
conditions_temp_2 <- conditions_temp %>%
group_by(n_participant) %>%
dplyr::distinct(participant, na.rm = TRUE)
conditions_temp_2 <- conditions_temp %>%
group_by(n_participant) %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant))
conditions_temp_2 <- conditions_temp %>%
group_by(n_participant) %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant)) %>%
dplyr::mutate(participant = as.numeric(participant))
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant)) %>%
dplyr::mutate(participant = as.numeric(participant))
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant)
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant))
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant)) %>%
dplyr::mutate(participant = as.numeric(participant))
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant))
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant) %>%
dplyr::filter(!is.na(participant)) %>%
dplyr::mutate(participant = as.factor(participant))
conditions_temp_3 <- conditions_temp %>%
dplyr::select(n_participant, rule) %>%
dplyr::filter(!is.na(rule)) %>%
dplyr::mutate(rule = ifelse(rule == "Colours are colours and shapes are shapes", "full",
ifelse(rule == "Respond correctly to the stimuli", "minimal", NA)))
conditions_temp_4 <- conditions_temp %>%
dplyr::select(n_participant, block_order_1) %>%
dplyr::filter(!is.na(block_order_1)) %>%
dplyr::mutate(block_order_1 = "con")
conditions_temp_5 <- conditions_temp %>%
dplyr::select(n_participant, block_order_2) %>%
dplyr::filter(!is.na(block_order_2)) %>%
dplyr::mutate(block_order_2 = "incon")
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA)),
participant = as.factor(participant)) %>%
select(-block_order_1, -block_order_2, -n_participant)
conditions_temp_2 <- conditions_temp %>%
dplyr::distinct(participant, .keep_all = TRUE) %>%
dplyr::select(participant, n_participant) %>%
dplyr::filter(!is.na(participant)) %>%
dplyr::mutate(participant = as.factor(participant))
conditions_temp_3 <- conditions_temp %>%
dplyr::select(n_participant, rule) %>%
dplyr::filter(!is.na(rule)) %>%
dplyr::mutate(rule = ifelse(rule == "Colours are colours and shapes are shapes", "full",
ifelse(rule == "Respond correctly to the stimuli", "minimal", NA)))
conditions_temp_4 <- conditions_temp %>%
dplyr::select(n_participant, block_order_1) %>%
dplyr::filter(!is.na(block_order_1)) %>%
dplyr::mutate(block_order_1 = "con")
conditions_temp_5 <- conditions_temp %>%
dplyr::select(n_participant, block_order_2) %>%
dplyr::filter(!is.na(block_order_2)) %>%
dplyr::mutate(block_order_2 = "incon")
conditions_data <-
plyr::join_all(list(as.data.frame(conditions_temp_2),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(conditions_temp_3),
as.data.frame(conditions_temp_4),
as.data.frame(conditions_temp_5)),
by = "n_participant",
type = "full") %>%
dplyr::mutate(block_order = paste0(block_order_1, block_order_2),
block_order = ifelse(block_order == "conNA", "con",
ifelse(block_order == "NAincon", "incon", NA)),
participant = as.factor(participant)) %>%
select(-block_order_1, -block_order_2, -n_participant)
conditions_data %>% write.csv("data/processed/conditions data.csv", row.names = FALSE)
d_scores_data <-
read.csv("data/processed/D scored data.csv") %>%
select(-block_order) %>%
dplyr::rename(participant = participant_code) %>%
dplyr::mutate(participant = as.factor(participant))
all_data <- dplyr::inner_join(conditions_data, d_scores_data, by = "participant")
View(all_data)
View(all_data)
all_data %>% write.csv("processed data.csv", row.names = FALSE)
all_data %>% write.csv("data/processed/processed data.csv", row.names = FALSE)
data %>% read.csv("data/processed/processed data.csv")
library(tidyverse)
data %>% read.csv(file = "data/processed/processed data.csv")
library(tidyverse)
data %>% read.csv(file = "data/processed/processed data.csv")
library(tidyverse)
data <- read.csv(file = "data/processed/processed data.csv")
View(data)
View(data)
colnames(data)
