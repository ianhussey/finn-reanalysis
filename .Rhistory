select(unique_id)
trimmed <- cumulative_BC_and_mastery_data %>%
semi_join(sd_outliers, cumulative_BC_and_mastery_data, by = "unique_id")
ggplot(data = sd_outliers) +
geom_density(aes(x = cumulative_rt))
ggplot(data = trimmed) +
geom_density(aes(x = rt))
grouped <- trimmed %>%
group_by(BC_mastery, trial_n) %>%
summarize(mean_rt = mean(rt),
mean_accuracy = mean(accuracy))
grouped_3 <- trimmed %>%
group_by(BC_three_category, trial_n) %>%
summarize(mean_rt = mean(rt),
mean_accuracy = mean(accuracy))
ggplot() +
geom_smooth(data = trimmed,
aes(y = rt,
x = trial_n,
color = BC_mastery),
method = "loess",
alpha = 0.3) +
geom_line(data = grouped,
aes(y = mean_rt,
x = trial_n,
color = BC_mastery)) +
geom_point(data = grouped,
aes(y = mean_rt,
x = trial_n,
color = BC_mastery)) +
theme_minimal()
ggplot() +
geom_smooth(data = trimmed,
aes(y = rt,
x = trial_n,
color = BC_three_category),
method = "loess",
alpha = 0.3) +
geom_line(data = grouped_3,
aes(y = mean_rt,
x = trial_n,
color = BC_three_category)) +
geom_point(data = grouped_3,
aes(y = mean_rt,
x = trial_n,
color = BC_three_category)) +
theme_minimal()
describe(summary_data)
library(psych)
describe(summary_data)
summary_data %>%
select(BC_mastery, BC_three_category) %>%
describe()
summary_data %>%
select(BC_mastery, BC_three_category) %>%
describeBy(BC_mastery)
?describeBy
summary_data %>%
select(BC_mastery, BC_three_category) %>%
describeBy(group = "BC_mastery")
summary_data %>%
select(BC_mastery) %>%
describeBy(group = "BC_mastery")
summary_data %>%
select(BC_three_category) %>%
describeBy(group = "BC_three_category")
summary_data %>%
select(BC_three_category) %>%
statsBy(group = "BC_three_category")
summary_data %>%
select(BC_three_category) %>%
describeBy(group = "BC_three_category")
x <- summary_data %>%
select(BC_three_category) %>%
describeBy(group = "BC_three_category")
x[,1]
x[1,]
cumulative_BC_and_mastery_data %>%
select(BC_mastery) %>%
describeBy(group = "BC_mastery")
cumulative_BC_and_mastery_data %>%
distinct(unique_id) %>%
select(BC_mastery) %>%
describeBy(group = "BC_mastery")
cumulative_BC_and_mastery_data %>%
distinct(unique_id, keep.all = TRUE) %>%
select(BC_mastery) %>%
describeBy(group = "BC_mastery")
?distinct
cumulative_BC_and_mastery_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(BC_mastery) %>%
describeBy(group = "BC_mastery")
cumulative_BC_and_mastery_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(BC_three_category) %>%
describeBy(group = "BC_three_category")
ggplot(data = trimmed,
aes(x = cumulative_rt,
y = cumulative_accuracy,
color = BC_mastery)) +
geom_line(aes(group = unique_id),
alpha = 0.2) +
geom_point(alpha = 0.2) +
theme(legend.position="none") + # suppress legend
theme_minimal()
grouped <- trimmed %>%
group_by(BC_mastery, trial_n) %>%
summarize(mean_rt = mean(rt),
mean_accuracy = mean(accuracy))
grouped_3 <- trimmed %>%
group_by(BC_three_category, trial_n) %>%
summarize(mean_rt = mean(rt),
mean_accuracy = mean(accuracy))
library(tidyverse)
library(lme4)
library(afex)
library(psych)
library(schoRsch)
setwd("/Users/Ian/git/Precursers to equivalence/")
combined_screened_data <- read.csv("data/combined screened data.csv")
summary_data <- read.csv("data/summary data.csv")
cumulative_BC_data <-
combined_screened_data %>%
filter(grepl("Relational_Testing_Phase", block_name)) %>%  # filter rows where the block_name includes string
select(unique_id, trial_n, accuracy, rt) %>%
group_by(unique_id) %>%
mutate(cumulative_rt = cumsum(rt),
cumulative_accuracy = cumsum(accuracy)) %>%
ungroup()
mastery_data <-
summary_data %>%
select(unique_id, training_mastery, BC_mastery, BC_three_category)
cumulative_BC_and_mastery_data <-
left_join(cumulative_BC_data,
mastery_data,
by = "unique_id") %>%
filter(!is.na(BC_mastery) &
training_mastery == "pass") %>%
arrange(desc(BC_mastery))
ggplot(data = cumulative_BC_and_mastery_data) +
geom_density(aes(x = rt))
cumulative_BC_and_mastery_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(BC_mastery) %>%
psych::describeBy(group = "BC_mastery")
cumulative_BC_and_mastery_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(BC_three_category) %>%
psych::describeBy(group = "BC_three_category")
sd_outliers <- cumulative_BC_and_mastery_data %>%
select(unique_id, cumulative_rt) %>%
group_by(unique_id) %>%
summarize(max_cumulative_rt = max(cumulative_rt)) %>%
ungroup() %>%
schoRsch::outlier(dv = "max_cumulative_rt",
res.name = "outlier",
todo = "elim",
upper.z = 2.5,
lower.z = -2.5) %>%
select(unique_id)
trimmed <- cumulative_BC_and_mastery_data %>%
semi_join(sd_outliers, cumulative_BC_and_mastery_data, by = "unique_id")
ggplot(data = trimmed) +
geom_density(aes(x = rt))
ggplot(data = trimmed,
aes(x = cumulative_rt,
y = cumulative_accuracy,
color = BC_mastery)) +
geom_line(aes(group = unique_id),
alpha = 0.2) +
geom_point(alpha = 0.2) +
theme(legend.position="none") + # suppress legend
theme_minimal()
temp_x <- trimmed %>%
group_by(unique_id) %>%
summarize(acc = mean(accuracy),
speed = max(cumulative_rt),
fluency = acc*100000/speed)  # percentage accuracy per second
temp_y <- trimmed %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery) %>%
left_join(temp_x, by = "unique_id")
ggplot(data = temp_y, aes(x = acc, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 3, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y, aes(x = acc, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 1, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y, aes(x = acc, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 2, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y, aes(x = acc, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 3, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y, aes(x = speed, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 2, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y, aes(x = fluency, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 2, alpha = 0.3) +
theme_minimal()
grouped <- trimmed %>%
group_by(BC_mastery, trial_n) %>%
summarize(mean_rt = mean(rt),
mean_accuracy = mean(accuracy))
grouped_3 <- trimmed %>%
group_by(BC_three_category, trial_n) %>%
summarize(mean_rt = mean(rt),
mean_accuracy = mean(accuracy))
ggplot() +
geom_smooth(data = trimmed,
aes(y = rt,
x = trial_n,
color = BC_mastery),
method = "loess",
alpha = 0.3) +
geom_line(data = grouped,
aes(y = mean_rt,
x = trial_n,
color = BC_mastery)) +
geom_point(data = grouped,
aes(y = mean_rt,
x = trial_n,
color = BC_mastery)) +
theme_minimal()
ggplot() +
geom_smooth(data = trimmed,
aes(y = accuracy,
x = trial_n,
color = BC_mastery),
method = "loess",
alpha = 0.3) +
geom_line(data = grouped,
aes(y = mean_accuracy,
x = trial_n,
color = BC_mastery)) +
geom_point(data = grouped,
aes(y = mean_accuracy,
x = trial_n,
color = BC_mastery)) +
theme_minimal() +
ylim(0,1)
library(plyr)
library(tidyverse)
library(stringr)
library(data.table)
setwd("/Users/Ian/git/Precursers to equivalence/data")
cleaned_data <- read.csv("combined screened data.csv")
demographics_data_temp_1 <- cleaned_data %>%
dplyr::group_by(unique_id) %>%
dplyr::filter(grepl("demographics", block_name),
trialcode == "age") %>%  # filter rows where the block_name includes string
dplyr::rename(age = string_response) %>%
dplyr::mutate(age = as.numeric(age)) %>%
dplyr::select(unique_id, age) %>% # select only necessary columns
dplyr::distinct(unique_id, .keep_all = TRUE)
demographics_data_temp_2 <- cleaned_data %>%
dplyr::group_by(unique_id) %>%
dplyr::filter(grepl("demographics", block_name),
trialcode == "gender") %>%  # filter rows where the block_name includes string
dplyr::rename(gender = string_response) %>%
dplyr::select(unique_id, gender) %>% # select only necessary columns
dplyr::distinct(unique_id, .keep_all = TRUE) %>%
dplyr::mutate(gender = tolower(gender),  # convert to lower case
gender = gsub(" ", "", gender))  # remove spaces
demographics_data <-
inner_join(demographics_data_temp_1, demographics_data_temp_2, by = "unique_id")
AB_data <- cleaned_data %>%
dplyr::filter(grepl("Relational_Training_Phase_AB_", block_name)) %>%  # filter rows where the block_name includes string
dplyr::select(unique_id, block_name, accuracy, rt, block_n)
AB_n_blocks_data <- AB_data %>%
dplyr::group_by(unique_id) %>%
dplyr::summarize(AB_n_blocks = max(block_n, na.rm = TRUE))
AB_perc_acc_data <- AB_data %>%
dplyr::group_by(unique_id) %>%
dplyr::filter(block_n == max(block_n, na.rm = TRUE)) %>%  # filter only the last of their blocks (up to 5)
dplyr::summarize(AB_perc_acc = round(sum(accuracy)/n(), 3)*100) %>%
dplyr::mutate(AB_mastery = ifelse(AB_perc_acc >= 87.5, "pass", "fail"),
AB_three_category = ifelse(AB_perc_acc >= 87.5, "pass",
ifelse(AB_perc_acc <= 18.75, "reversed", "fail")))  # 87.5 is >=14/16 correct, which has a binomial probability of 0.002
AC_data <- cleaned_data %>%
dplyr::filter(grepl("Relational_Training_Phase_AC_", block_name)) %>%  # filter rows where the block_name includes string
dplyr::select(unique_id, block_name, accuracy, block_n)
AC_n_blocks_data <- AC_data %>%
dplyr::group_by(unique_id) %>%
dplyr::summarize(AC_n_blocks = max(block_n, na.rm = TRUE))
AC_perc_acc_data <- AC_data %>%
dplyr::group_by(unique_id) %>%
dplyr::filter(block_n == max(block_n, na.rm = TRUE)) %>%  # filter only the last of their blocks (up to 5)
dplyr::summarize(AC_perc_acc = round(sum(accuracy)/n(), 3)*100) %>%
dplyr::mutate(AC_mastery = ifelse(AC_perc_acc >= 87.5, "pass", "fail"),
AC_three_category = ifelse(AC_perc_acc >= 87.5, "pass",
ifelse(AC_perc_acc <= 18.75, "reversed", "fail")))  # 87.5 is >=14/16 correct, which has a binomial probability of 0.002
ABAC_data <- cleaned_data %>%
dplyr::filter(grepl("Relational_Training_Phase_ABAC_", block_name)) %>%  # filter rows where the block_name includes string
dplyr::select(unique_id, block_name, accuracy, block_n)
ABAC_n_blocks_data <- ABAC_data %>%
dplyr::group_by(unique_id) %>%
dplyr::summarize(ABAC_n_blocks = max(block_n, na.rm = TRUE))
ABAC_perc_acc_data <- ABAC_data %>%
dplyr::group_by(unique_id) %>%
dplyr::filter(block_n == max(block_n, na.rm = TRUE)) %>%  # filter only the last of their blocks (up to 5)
dplyr::summarize(ABAC_perc_acc = round(sum(accuracy)/n(), 3)*100) %>%
dplyr::mutate(ABAC_mastery = ifelse(ABAC_perc_acc >= 87.5, "pass", "fail"),
ABAC_three_category = ifelse(ABAC_perc_acc >= 87.5, "pass",
ifelse(ABAC_perc_acc <= 18.75, "reversed", "fail")))  # 87.5 is >=14/16 correct, which has a binomial probability of 0.002
training_data <- cleaned_data %>%
dplyr::filter(grepl("Relational_Training_Phase_", block_name)) %>%  # filter rows where the block_name includes string
dplyr::select(unique_id, block_name, accuracy, rt, block_n) %>%
dplyr::group_by(unique_id) %>%
dplyr::summarize(all_training_total_time = sum(rt),
all_training_accuracy = round(mean(accuracy), 2),
all_training_fluency = all_training_accuracy*100000/all_training_total_time)  # acquisition slope, accurate responses per second
all_task_data <- cleaned_data %>%
dplyr::filter(grepl("Relational_", block_name)) %>%  # filter rows where the block_name includes string
dplyr::select(unique_id, block_name, accuracy, rt, block_n) %>%
dplyr::group_by(unique_id) %>%
dplyr::summarize(task_total_time = sum(rt))
BC_perc_acc_data <- cleaned_data %>%
dplyr::filter(grepl("Relational_Testing_Phase", block_name)) %>%  # filter rows where the block_name includes string
dplyr::select(unique_id, accuracy) %>%
dplyr::group_by(unique_id) %>%
dplyr::summarize(BC_perc_acc = round(sum(accuracy)/n(), 3)*100) %>%  # % accuracy
dplyr::mutate(BC_mastery = ifelse(BC_perc_acc >= 87.5, "pass", "fail"),
BC_three_category = ifelse(BC_perc_acc >= 87.5, "pass",
ifelse(BC_perc_acc <= 18.75, "reversed", "fail")))  # 87.5 is >=14/16 correct, which has a binomial probability of 0.002
combined_data <-
plyr::join_all(list(as.data.frame(demographics_data),  # join_all throws a requires input be data.frame error, despite is.data.frame returning TRUE for all members of list. Workaround is to coerce all to DF here.
as.data.frame(AB_n_blocks_data),
as.data.frame(AB_perc_acc_data),
as.data.frame(AC_n_blocks_data),
as.data.frame(AC_perc_acc_data),
as.data.frame(ABAC_n_blocks_data),
as.data.frame(ABAC_perc_acc_data),
as.data.frame(BC_perc_acc_data)),
by = "unique_id",
type = "full")
output_data <- combined_data %>%
rowwise() %>%
dplyr::mutate(training_mastery = ifelse(AB_mastery == "fail", "fail",
ifelse(AC_mastery == "fail", "fail",
ifelse(ABAC_mastery == "fail", "fail", "pass"))),
training_total_trials = sum(AB_n_blocks, AC_n_blocks, ABAC_n_blocks)*16,
training_perc_acc = mean(c(AB_perc_acc, AC_perc_acc, ABAC_perc_acc))) %>%
ungroup()
temp_y <- output_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery, training_mastery) %>%
filter(training_mastery == "pass") %>%
left_join(training_data, by = "unique_id")
ggplot(data = temp_y,
aes(x = all_training_accuracy, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 1, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y,
aes(x = all_training_total_time, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 1, alpha = 0.3) +
theme_minimal()
ggplot(data = temp_y,
aes(x = all_training_fluency, colour = BC_mastery, fill = BC_mastery)) +
geom_density(adjust = 1, alpha = 0.3) +
theme_minimal()
View(temp_y)
View(temp_y)
fit <- glm(BC_mastery ~ all_training_accuracy,
family = "binomial",
data = temp_y)
?glm
temp_y <- output_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery, training_mastery) %>%
filter(training_mastery == "pass") %>%
left_join(training_data, by = "unique_id") %>%
mutate(BC_mastery = as.factor(ifelse(BC_mastery = "fail", 0, 1)))
temp_y <- output_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery, training_mastery) %>%
filter(training_mastery == "pass") %>%
left_join(training_data, by = "unique_id") %>%
mutate(BC_mastery = ifelse(BC_mastery = "fail", 0, 1))
temp_y <- output_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery, training_mastery) %>%
filter(training_mastery == "pass") %>%
left_join(training_data, by = "unique_id") %>%
mutate(BC_mastery = ifelse(BC_mastery == "fail", 0, 1))
temp_y <- output_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery, training_mastery) %>%
filter(training_mastery == "pass") %>%
left_join(training_data, by = "unique_id") %>%
mutate(BC_mastery = ifelse(BC_mastery == "fail", 0, 1)) %>%
rename(testing_pass = BC_mastery)
temp_y <- output_data %>%
distinct(unique_id, .keep_all = TRUE) %>%
select(unique_id, BC_mastery, training_mastery) %>%
filter(training_mastery == "pass") %>%
left_join(training_data, by = "unique_id") %>%
mutate(BC_mastery = ifelse(BC_mastery == "fail", 0, 1)) %>%
dplyr::rename(testing_pass = BC_mastery)
for_analysis <-
fit <- glm(testing_pass ~ all_training_accuracy,
family = "binomial",
data = temp_y)
summary(fit)
fit_acc <- glm(testing_pass ~ all_training_accuracy,
family = "binomial",
data = temp_y)
summary(fit_acc)
fit_time <- glm(testing_pass ~ all_training_total_time,
family = "binomial",
data = temp_y)
summary(fit_time)
fit_fluency <- glm(testing_pass ~ all_training_fluency,
family = "binomial",
data = temp_y)
summary(fit_fluency)
fit_acc <- glm(testing_pass ~ all_training_accuracy,
family = "binomial",
data = temp_y)
summary(fit_acc)
fit_time <- glm(testing_pass ~ all_training_total_time,
family = "binomial",
data = temp_y)
summary(fit_time)
fit_fluency <- glm(testing_pass ~ all_training_fluency,
family = "binomial",
data = temp_y)
summary(fit_fluency)
fit_combined <- glm(testing_pass ~ all_training_accuracy + all_training_total_time + all_training_fluency,
family = "binomial",
data = temp_y)
summary(fit_combined)
fit_combined <- glm(testing_pass ~ all_training_accuracy + all_training_total_time + all_training_fluency,
family = "binomial",
data = temp_y)
summary(fit_combined)
fit_combined <- glm(testing_pass ~ all_training_accuracy * all_training_total_time * all_training_fluency,
family = "binomial",
data = temp_y)
summary(fit_combined)
summary(fit_combined)
fit_combined <- glm(testing_pass ~ all_training_accuracy + all_training_total_time + all_training_fluency,
family = "binomial",
data = temp_y)
summary(fit_combined)
summary(fit_combined)
?pattern
library(plyr)
library(tidyverse)
library(data.table)
?list.files
setwd("/Users/Ian/git/finn-reanalysis/data/experiment 2/full instructions condition")
setwd("/Users/Ian/git/finn-reanalysis/data/experiment 2/full instructions condition")
files <- list.files(pattern = "Raw")
setwd("/Users/Ian/git/finn-reanalysis/data/experiment 2/full instructions condition")
files <- list.files(pattern = "Raw")
full_inst_condition <- dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)))  # tbl_df() requires dplyr, rbind.fill() requires plyr, fread requires data.table
full_inst_condition <- dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)))
View(full_inst_condition)
View(full_inst_condition)
files <- list.files(pattern = "Summary")
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)))
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE, fill = TRUE)))
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE), fill = TRUE))
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)), fill = TRUE)
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE, fill = TRUE)))
View(full_inst_condition)
View(full_inst_condition)
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = FALSE, fill = TRUE)))
View(full_inst_condition)
View(full_inst_condition)
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = FALSE, fill = TRUE)))
View(full_inst_condition)
View(full_inst_condition)
setwd("/Users/Ian/git/finn-reanalysis/data/experiment 2/full instructions condition")
files <- list.files(pattern = "Summary")
full_inst_condition <-
dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = FALSE, fill = TRUE)))
?rbind.fill
full_inst_condition <-
lapply(files, data.table::fread, header = FALSE, fill = TRUE) %>%
plyr::rbind.fill()
full_inst_condition <-
lapply(files, data.table::fread, header = FALSE, fill = TRUE)
?fread
full_inst_condition <-
lapply(files, data.table::fread(header = FALSE, fill = TRUE)) %>%
plyr::rbind.fill()
files <- list.files(pattern = "Summary")
full_inst_condition <-
lapply(files, data.table::fread(header = FALSE, fill = TRUE))
full_inst_condition <-
lapply(files, data.table::fread(header = FALSE, fill = TRUE, verbose = TRUE)) %>%
plyr::rbind.fill()
library(readr)
library(dplyr)
tbl = lapply(files, read_csv) %>% bind_rows()
View(tbl)
View(tbl)
tbl = lapply(files, read_csv(fill = TRUE)) %>% bind_rows()
tbl = lapply(files, read_csv) %>% bind_rows()
problems()
problems(...)
setwd("/Users/Ian/git/finn-reanalysis")
